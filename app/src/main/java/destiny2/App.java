/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package destiny2;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.*;

public class App {
    public final ArmorComparator RES_REC_STR =
        new ArmorComparator(Stat.RES, Stat.REC, Stat.STR);
    public final ArmorComparator ALL_STATS =
        new ArmorComparator(Stat.values());

    //-------------------------------------------------------------------------
    // Instance variables

    private Map<Type, List<Armor>> vault = new HashMap<>();


    //-------------------------------------------------------------------------
    // The App

    public void start(String filename, List<Stat> primaryStats) throws Exception {
        println("In: " + System.getProperty("user.dir"));
        // FIRST, load the armor from the file.
        readVault(filename).forEach(armor -> {
            vault.putIfAbsent(armor.type(), new ArrayList<Armor>());
            vault.get(armor.type()).add(armor);
        });

        println("\nArmor from " + filename + ":\n");
        dumpVault();

        // NEXT, generate the possible choices
        var sets = generateSets();

        var comparator = (primaryStats.isEmpty())
            ? ALL_STATS
            : new ArmorComparator(primaryStats);

        sets.sort(comparator.reversed());

        println("\nPossible Sets by " + comparator + ":\n");

        sets.stream().limit(5).forEach(set -> {
            set.dump();
            println("");
        });
    }

    //-------------------------------------------------------------------------
    // Data Builders

    // Generates all possible armor sets from the available choices.
    private List<ArmorSet> generateSets() {
        var result = new ArrayList<ArmorSet>();

        for (var head = 0; head < vault.get(Type.HEAD).size(); head++) {
            for (var arms = 0; arms < vault.get(Type.ARMS).size(); arms++) {
                for (var body = 0; body < vault.get(Type.BODY).size(); body++) {
                    for (var legs = 0; legs < vault.get(Type.LEGS).size(); legs++) {
                        result.add(makeSet(head, arms, body, legs));
                    }
                }
            }
        }

        return result;
    }

    private ArmorSet makeSet(int head, int arms, int body, int legs) {
        var set = new ArmorSet();

        set.put(Type.HEAD, vault.get(Type.HEAD).get(head));
        set.put(Type.ARMS, vault.get(Type.ARMS).get(arms));
        set.put(Type.BODY, vault.get(Type.BODY).get(body));
        set.put(Type.LEGS, vault.get(Type.LEGS).get(legs));

        return set;
    }


    void dumpVault() {
        for (Type type : Type.values()) {
            for (Armor armor : vault.get(type)) {
                println(armor.data());
            }
        }
    }

    public List<Armor> readVault(String filename) throws Exception {
        var result = new ArrayList<Armor>();

        Files.lines(new File(filename).toPath())
            .map(line -> line.trim())
            .filter(line -> !line.isEmpty())
            .forEach(line -> result.add(parseArmor(line)));

        return result;
    }

    int indexCount = 0;

    public Armor parseArmor(String line) {
        Scanner scanner = new Scanner(line).useDelimiter("\\s*,\\s*");
        var type = Type.valueOf(scanner.next());
        var name = scanner.next().trim();
        var armor = new Armor(++indexCount, type, name);

        Stat.stream().forEach(stat -> armor.put(stat, scanner.nextInt()));

        return armor;
    }

    void println(String text) {
        System.out.println(text);
    }

    //-------------------------------------------------------------------------
    // Main
    public static void main(String[] args) {
        if (args.length == 0) {
            System.out.println("Usage: armor armor.dat stat...");
            System.exit(0);
        }

        try {
            var filename = args[0];
            var primaryStats = Arrays.stream(args)
                .skip(1)
                .map(arg -> Stat.valueOf(arg.toUpperCase()))
                .distinct()
                .toList();
            new App().start(filename, primaryStats);
        } catch (Exception ex) {
            System.out.println("Error: " + ex.getMessage());
            ex.printStackTrace(System.out);
        }
    }
}
