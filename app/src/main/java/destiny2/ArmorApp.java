/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package destiny2;

import java.io.File;
import java.util.*;

public class ArmorApp {
    //-------------------------------------------------------------------------
    // Instance variables

    // The data loaded from the armor file.
    private ArmorFile db;

    //-------------------------------------------------------------------------
    // The App

    public void app(String[] args) {
        if (args.length == 0) {
            println("""
            Usage: armor armor.dat [options...]
                
                -limit num     -- Maximum number of results to display, default is 5
                -mob weight    -- default is 1.0 for each
                -res weight
                -rec weight
                -dis weight
                -int weight
                -str weight
                -minmob value  -- Minimum stat, default is 0
                -minres value  -- Minimum stat, default is 0
                -minrec value  -- Minimum stat, default is 0
                -mindis value  -- Minimum stat, default is 0
                -minint value  -- Minimum stat, default is 0
                -minstr value  -- Minimum stat, default is 0
            """);
            System.exit(1);
        }

        // NEXT, where are we?
        println("In: " + System.getProperty("user.dir"));

        // NEXT, parse the arguments
        var options = new Options(args);

        // FIRST, load the armor from the file.
        db = new ArmorFile(new File(options.getFileName()));

        println("\nArmor from " + options.getFileName() + ":\n");
        db.getPieces().forEach(p ->
            System.out.printf("%04d %s\n", db.getLineNumber(p), p.data()));

        // NEXT, get the current set.
        var vault = makeVault(db.getPieces());
        // TODO: Should be defined in file!
        var current = makeSet(vault, 0, 0, 0, 0);

        println("\nEquipped set:\n");
        current.dump();

        // NEXT, generate the possible choices
        var sets = generateArmorSets(db.getPieces());

        var comparator = new ArmorComparator(options.getWeights());
        var mins = options.getMins();

        sets.sort(comparator.reversed());

        println("\nPossible sets listed by:  " + comparator);
        println("Minimum acceptable stats:" + mins.numbers() + "\n");

        var results = sets.stream()
            .filter(set -> set.dominates(mins))
            .limit(options.getLimit())
            .toList();

        for (int i = 0; i < results.size(); i++) {
            results.get(i).setName("Choice #" + (i + 1));
        }

        results.forEach(set -> {
            set.dump();
            println("");
        });
    }

    //-------------------------------------------------------------------------
    // Data Functions

    // Given a list of pieces of armor, group them by armor type
    private Map<Type,List<Armor>> makeVault(List<Armor> pieces) {
        Map<Type,List<Armor>> vault = new HashMap<>();

        db.getPieces().forEach(piece -> {
            vault.putIfAbsent(piece.type(), new ArrayList<>());
            vault.get(piece.type()).add(piece);
        });

        return vault;
    }

    // Generates all possible armor sets from the available pieces,
    // excluding sets with more than one exotic.
    private List<ArmorSet> generateArmorSets(List<Armor> pieces) {
        var vault = makeVault(pieces);
        var result = new ArrayList<ArmorSet>();

        // Is there a cleaner, more concise way to do this?
        for (var head = 0; head < vault.get(Type.HEAD).size(); head++) {
            for (var arms = 0; arms < vault.get(Type.ARMS).size(); arms++) {
                for (var body = 0; body < vault.get(Type.BODY).size(); body++) {
                    for (var legs = 0; legs < vault.get(Type.LEGS).size(); legs++) {
                        // If there are two or more exotics, it isn't a valid
                        // armor set.
                        var set = makeSet(vault, head, arms, body, legs);
                        var numberOfExotics = set.values().stream()
                            .filter(Armor::isExotic)
                            .count();

                        if (numberOfExotics <= 1) {
                            result.add(set);
                        }
                    }
                }
            }
        }

        return result;
    }

    private ArmorSet makeSet(Map<Type,List<Armor>> vault, int head, int arms, int body, int legs) {
        var set = new ArmorSet();

        set.put(Type.HEAD, vault.get(Type.HEAD).get(head));
        set.put(Type.ARMS, vault.get(Type.ARMS).get(arms));
        set.put(Type.BODY, vault.get(Type.BODY).get(body));
        set.put(Type.LEGS, vault.get(Type.LEGS).get(legs));

        return set;
    }

    void println(String text) {
        System.out.println(text);
    }

    //-------------------------------------------------------------------------
    // Main
    public static void main(String[] args) {
        try {
            new ArmorApp().app(args);
        } catch (AppError ex) {
            System.out.println("Error: " + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Unexpected Exception: " + ex.getMessage());
            ex.printStackTrace(System.out);
        }
    }
}
